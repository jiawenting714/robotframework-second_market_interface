*** Settings ***
Library           RequestsLibrary
Resource          公共资源.txt
Library           MyMongodbLibrary
Library           Collections
Library           String

*** Variables ***
${target_search_url}    /api/remarket/target?offset=0&limit=100

*** Test Cases ***
查询营销对象_01_无权限用户登录查询
    &{user_info}    create dictionary    username=super    password=gfadmin
    &{header}    create dictionary    Content-Type=application/json
    ${session}    登录    ${login_interface}    ${user_info['username']}    ${user_info['password']}
    ${response}    get request    global_session    ${target_search_url}    headers=&{header}
    log    ${response.text}
    should be equal as integers    ${response.json()['code']}    ${18}
    should be equal as strings    ${response.json()['msg']}    您没有权限访问

查询营销对象_02_用户未登录查询
    create_global_session    global_session
    &{header}    create dictionary    Content-Type=application/json
    ${response}    get request    global_session    ${target_search_url}    headers=&{header}
    log    ${response.text}
    should be equal as integers    ${response.json()['code']}    ${17}
    should be equal as strings    ${response.json()['msg']}    认证失败:Error: 未登录

查询营销对象_03_有权限用户查询
    &{header}    create dictionary    Content-Type=application/json
    ${session}    登录    ${login_interface}    ${user_info['username']}    ${user_info['password']}
    ${response}    get request    global_session    ${target_search_url}    headers=&{header}
    should be equal as integers    ${response.json()['code']}    ${0}

分包营销对象_04_临时对象指定分包
    &{header}    create dictionary    Content-Type=application/json
    ${session}    登录    ${login_interface}    ${user_info['username']}    ${user_info['password']}
    ${target_info}    查询营销对象    临时对象
    ${partition_strategy}    分包策略    ${target_info['customer_count']}    3
    ${pack_strategy}    create dictionary    partition=${partition_strategy}    type=2
    #拼接分包url
    ${target_pack_url}    catenate    SEPARATOR=${EMPTY}    /api/remarket/target/pack/    ${target_info['id']}
    ${response}    put request    global_session    ${target_pack_url}    data=${pack_strategy}    headers=&{header}
    should be equal as integers    ${response.json()['code']}    ${0}
    should be equal as strings    ${response.json()['data']}    ok

分包营销对象_05_临时对象指定分包_分包数之和大于对象量
    &{header}    create dictionary    Content-Type=application/json
    ${session}    登录    ${login_interface}    ${user_info['username']}    ${user_info['password']}
    ${target_info}    查询营销对象    临时对象
    ${partition_strategy}    分包策略    ${target_info['customer_count']+1}    3
    ${pack_strategy}    create dictionary    partition=${partition_strategy}    type=2
    #拼接分包url
    ${target_pack_url}    catenate    SEPARATOR=${EMPTY}    /api/remarket/target/pack/    ${target_info['id']}
    ${response}    put request    global_session    ${target_pack_url}    data=${pack_strategy}    headers=&{header}
    should be equal as strings    ${response.json()['msg']}    分包数量与总客户数不匹配
    should be equal as integers    ${response.json()['code']}    ${13}

分包营销对象_06_临时对象指定分包_分包数之和小于对象量
    &{header}    create dictionary    Content-Type=application/json
    ${session}    登录    ${login_interface}    ${user_info['username']}    ${user_info['password']}
    ${target_info}    查询营销对象    临时对象
    ${partition_strategy}    分包策略    ${target_info['customer_count']-1}    3
    ${pack_strategy}    create dictionary    partition=${partition_strategy}    type=2
    #拼接分包url
    ${target_pack_url}    catenate    SEPARATOR=${EMPTY}    /api/remarket/target/pack/    ${target_info['id']}
    ${response}    put request    global_session    ${target_pack_url}    data=${pack_strategy}    headers=&{header}
    should be equal as strings    ${response.json()['msg']}    分包数量与总客户数不匹配
    should be equal as integers    ${response.json()['code']}    ${13}

分包营销对象_07_定时对象比例分包
    &{header}    create dictionary    Content-Type=application/json
    ${session}    登录    ${login_interface}    ${user_info['username']}    ${user_info['password']}
    ${target_info}    查询营销对象    定时对象
    ${partition_strategy}    分包策略    100    3
    ${pack_strategy}    create dictionary    partition=${partition_strategy}    type=2
    #拼接分包url
    ${target_pack_url}    catenate    SEPARATOR=${EMPTY}    /api/remarket/target/pack/    ${target_info['id']}
    ${response}    put request    global_session    ${target_pack_url}    data=${pack_strategy}    headers=&{header}
    should be equal as strings    ${response.json()['msg']}    分包数量与总客户数不匹配
    should be equal as integers    ${response.json()['code']}    ${13}

分包营销对象_08_定时对象比例分包_分包之和小于100
    &{header}    create dictionary    Content-Type=application/json
    ${session}    登录    ${login_interface}    ${user_info['username']}    ${user_info['password']}
    ${target_info}    查询营销对象    临时对象
    ${partition_strategy}    分包策略    99    3
    ${pack_strategy}    create dictionary    partition=${partition_strategy}    type=2
    #拼接分包url
    ${target_pack_url}    catenate    SEPARATOR=${EMPTY}    /api/remarket/target/pack/    ${target_info['id']}
    ${response}    put request    global_session    ${target_pack_url}    data=${pack_strategy}    headers=&{header}
    should be equal as strings    ${response.json()['msg']}    分包数量与总客户数不匹配
    should be equal as integers    ${response.json()['code']}    ${13}

分包营销对象_09_定时对象比例分包_分包之和大于100
    &{header}    create dictionary    Content-Type=application/json
    ${session}    登录    ${login_interface}    ${user_info['username']}    ${user_info['password']}
    ${target_info}    查询营销对象    临时对象
    ${partition_strategy}    分包策略    101    3
    ${pack_strategy}    create dictionary    partition=${partition_strategy}    type=2
    #拼接分包url
    ${target_pack_url}    catenate    SEPARATOR=${EMPTY}    /api/remarket/target/pack/    ${target_info['id']}
    ${response}    put request    global_session    ${target_pack_url}    data=${pack_strategy}    headers=&{header}
    should be equal as strings    ${response.json()['msg']}    分包数量与总客户数不匹配
    should be equal as integers    ${response.json()['code']}    ${13}

*** Keywords ***
查询营销对象
    [Arguments]    ${target_type}    # 定时对象|临时对象
    [Documentation]    ${target_type} # 定时对象|临时对象
    connect mongodb    ${mongodb_info['host']}    ${mongodb_info['port']}    ${mongodb_info['database']}
    select collection    marketing_target
    ${frequency}    create dictionary    $ne=once
    ${filter}    run keyword if    '${target_type}'=='临时对象'    create dictionary    status=${0}    ref_count=${0}    frequency=once
    ...    ELSE IF    '${target_type}'=='定时对象'    create dictionary    status=${0}    ref_count=${0}    frequency=${frequency}
    ${results}    find    ${filter}    one_or_multi=one
    ${target_id}    set variable    ${results[0]['_id']}
    ${target_query_id}    set variable    ${results[0]['customer_query']}
    #获取对象量
    select collection    marketing_customer_query
    ${objectid}    Objectid    ${target_query_id}
    ${filter}    create dictionary    _id=${objectid}
    ${query_results}    find    ${filter}    one_or_multi=one
    ${target_customer_count}    set variable    ${query_results[0]['customer_count']}
    ${target_info}    create dictionary    id=${target_id}    customer_count=${target_customer_count}
    [Return]    ${target_info}    # 返回营销对象id和customer_count

分包策略
    [Arguments]    ${customer_count}    ${package_number}    # 对象量|分包数
    ${customer_count}    convert to integer    ${customer_count}
    ${package_number}    convert to integer    ${package_number}
    ${mod}    set variable    ${customer_count%${package_number}}
    ${div}    set variable    ${customer_count/${package_number}}
    #分包策略详情
    ${package_str}    set variable    ${EMPTY}
    ${package_list}    create list
    : FOR    ${i}    IN RANGE    ${package_number}
    \    append to list    ${package_list}    ${div}
    ${package_list[-1]}    set variable    ${package_list[-1]+${mod}}
    set list value    ${package_list}    -1    ${package_list[-1]}
    #拼接分包结果字符串
    : FOR    ${item}    IN    @{package_list}
    \    ${package_str}    catenate    SEPARATOR=,    ${package_str}    ${item}
    ${package_str}    strip string    ${package_str}    characters=,
    [Return]    ${package_str}    # 返回分包策略字符串
